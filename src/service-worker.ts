/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import {clientsClaim} from "workbox-core";
import {ExpirationPlugin} from "workbox-expiration";
import {createHandlerBoundToURL, precacheAndRoute} from "workbox-precaching";
import {registerRoute} from "workbox-routing";
import {NetworkFirst} from "workbox-strategies";
import OfflineNotifyWorkerPlugin from "./offlineNotifyWorkerPlugin";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({request, url}: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // If this URL is to the API backend, skip
    if (url.pathname.startsWith("/api")) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({url}) => url.origin === self.location.origin && (url.pathname.endsWith(".png") || url.pathname.endsWith("favicon.ico") || url.pathname.endsWith("manifest.json")),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new NetworkFirst({
    cacheName: "assets",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({maxEntries: 50}),
      new OfflineNotifyWorkerPlugin(),
    ],
  })
);

// Cache Google Fonts
registerRoute(
  ({url}) => url.origin === "https://fonts.googleapis.com" || url.origin === "https://fonts.gstatic.com",
  new NetworkFirst({
    cacheName: "google-fonts",
    plugins: [
      new ExpirationPlugin({maxEntries: 20}),
      new OfflineNotifyWorkerPlugin(),
    ],
  })
);

registerRoute(
  ({url}) => url.origin === self.location.origin && url.pathname.startsWith("/api"),
  new NetworkFirst({
    cacheName: "api",
    plugins: [
      new ExpirationPlugin({maxEntries: 200, maxAgeSeconds: 60 * 60 * 24 * 3}), // 3 days
      new OfflineNotifyWorkerPlugin(),
    ],
    networkTimeoutSeconds: 10
  })
);

// Cache TMDb Image responses
registerRoute(
  ({url}) => url.origin === "https://image.tmdb.org" && url.pathname.endsWith(".jpg"),
  new NetworkFirst({
    cacheName: "tmdb-img",
    plugins: [
      new ExpirationPlugin({maxEntries: 150, maxAgeSeconds: 60 * 60 * 24 * 3}), // 3 days
      new OfflineNotifyWorkerPlugin(),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
